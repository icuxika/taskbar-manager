// Generated by jextract

package com.icuxika.taskbar_manager.jextract.win32;

import java.lang.foreign.*;
import java.lang.invoke.MethodHandle;
import java.lang.invoke.MethodHandles;
import java.util.Arrays;
import java.util.stream.Collectors;

import static java.lang.foreign.ValueLayout.JAVA_BYTE;
import static java.lang.foreign.ValueLayout.OfLong;

public class ffm_h {

    ffm_h() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
        String traceArgs = Arrays.stream(args)
                .map(Object::toString)
                .collect(Collectors.joining(", "));
        System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
                .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.libraryLookup(System.mapLibraryName("user32"), LIBRARY_ARENA)
            .or(SymbolLookup.loaderLookup())
            .or(Linker.nativeLinker().defaultLookup());

    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));
    public static final ValueLayout.OfInt C_LONG = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfDouble C_LONG_DOUBLE = ValueLayout.JAVA_DOUBLE;
    /**
     * {@snippet lang = c:
     * typedef DWORD *LPDWORD
     *}
     */
    public static final AddressLayout LPDWORD = ffm_h.C_POINTER;
    /**
     * {@snippet lang = c:
     * typedef WCHAR *LPWSTR
     *}
     */
    public static final AddressLayout LPWSTR = ffm_h.C_POINTER;
    /**
     * {@snippet lang = c:
     * typedef LONG_PTR LPARAM
     *}
     */
    public static final OfLong LPARAM = ffm_h.C_LONG_LONG;
    /**
     * {@snippet lang = c:
     * typedef struct HWND__ {
     *     int unused;
     * } *HWND
     *}
     */
    public static final AddressLayout HWND = ffm_h.C_POINTER;

    private static class ShowWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                ffm_h.C_INT,
                ffm_h.C_POINTER,
                ffm_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                ffm_h.findOrThrow("ShowWindow"),
                DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c:
     * BOOL ShowWindow(HWND hWnd, int nCmdShow)
     *}
     */
    public static FunctionDescriptor ShowWindow$descriptor() {
        return ShowWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c:
     * BOOL ShowWindow(HWND hWnd, int nCmdShow)
     *}
     */
    public static MethodHandle ShowWindow$handle() {
        return ShowWindow.HANDLE;
    }

    /**
     * {@snippet lang = c:
     * BOOL ShowWindow(HWND hWnd, int nCmdShow)
     *}
     */
    public static int ShowWindow(MemorySegment hWnd, int nCmdShow) {
        var mh$ = ShowWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ShowWindow", hWnd, nCmdShow);
            }
            return (int) mh$.invokeExact(hWnd, nCmdShow);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IsIconic {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                ffm_h.C_INT,
                ffm_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                ffm_h.findOrThrow("IsIconic"),
                DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c:
     * BOOL IsIconic(HWND hWnd)
     *}
     */
    public static FunctionDescriptor IsIconic$descriptor() {
        return IsIconic.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c:
     * BOOL IsIconic(HWND hWnd)
     *}
     */
    public static MethodHandle IsIconic$handle() {
        return IsIconic.HANDLE;
    }

    /**
     * {@snippet lang = c:
     * BOOL IsIconic(HWND hWnd)
     *}
     */
    public static int IsIconic(MemorySegment hWnd) {
        var mh$ = IsIconic.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IsIconic", hWnd);
            }
            return (int) mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SetForegroundWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                ffm_h.C_INT,
                ffm_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                ffm_h.findOrThrow("SetForegroundWindow"),
                DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c:
     * BOOL SetForegroundWindow(HWND hWnd)
     *}
     */
    public static FunctionDescriptor SetForegroundWindow$descriptor() {
        return SetForegroundWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c:
     * BOOL SetForegroundWindow(HWND hWnd)
     *}
     */
    public static MethodHandle SetForegroundWindow$handle() {
        return SetForegroundWindow.HANDLE;
    }

    /**
     * {@snippet lang = c:
     * BOOL SetForegroundWindow(HWND hWnd)
     *}
     */
    public static int SetForegroundWindow(MemorySegment hWnd) {
        var mh$ = SetForegroundWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SetForegroundWindow", hWnd);
            }
            return (int) mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetWindowTextW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                ffm_h.C_INT,
                ffm_h.C_POINTER,
                ffm_h.C_POINTER,
                ffm_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                ffm_h.findOrThrow("GetWindowTextW"),
                DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c:
     * int GetWindowTextW(HWND hWnd, LPWSTR lpString, int nMaxCount)
     *}
     */
    public static FunctionDescriptor GetWindowTextW$descriptor() {
        return GetWindowTextW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c:
     * int GetWindowTextW(HWND hWnd, LPWSTR lpString, int nMaxCount)
     *}
     */
    public static MethodHandle GetWindowTextW$handle() {
        return GetWindowTextW.HANDLE;
    }

    /**
     * {@snippet lang = c:
     * int GetWindowTextW(HWND hWnd, LPWSTR lpString, int nMaxCount)
     *}
     */
    public static int GetWindowTextW(MemorySegment hWnd, MemorySegment lpString, int nMaxCount) {
        var mh$ = GetWindowTextW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetWindowTextW", hWnd, lpString, nMaxCount);
            }
            return (int) mh$.invokeExact(hWnd, lpString, nMaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EnumWindows {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                ffm_h.C_INT,
                ffm_h.C_POINTER,
                ffm_h.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                ffm_h.findOrThrow("EnumWindows"),
                DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c:
     * BOOL EnumWindows(WNDENUMPROC lpEnumFunc, LPARAM lParam)
     *}
     */
    public static FunctionDescriptor EnumWindows$descriptor() {
        return EnumWindows.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c:
     * BOOL EnumWindows(WNDENUMPROC lpEnumFunc, LPARAM lParam)
     *}
     */
    public static MethodHandle EnumWindows$handle() {
        return EnumWindows.HANDLE;
    }

    /**
     * {@snippet lang = c:
     * BOOL EnumWindows(WNDENUMPROC lpEnumFunc, LPARAM lParam)
     *}
     */
    public static int EnumWindows(MemorySegment lpEnumFunc, long lParam) {
        var mh$ = EnumWindows.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EnumWindows", lpEnumFunc, lParam);
            }
            return (int) mh$.invokeExact(lpEnumFunc, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetWindowThreadProcessId {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                ffm_h.C_LONG,
                ffm_h.C_POINTER,
                ffm_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                ffm_h.findOrThrow("GetWindowThreadProcessId"),
                DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang = c:
     * DWORD GetWindowThreadProcessId(HWND hWnd, LPDWORD lpdwProcessId)
     *}
     */
    public static FunctionDescriptor GetWindowThreadProcessId$descriptor() {
        return GetWindowThreadProcessId.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang = c:
     * DWORD GetWindowThreadProcessId(HWND hWnd, LPDWORD lpdwProcessId)
     *}
     */
    public static MethodHandle GetWindowThreadProcessId$handle() {
        return GetWindowThreadProcessId.HANDLE;
    }

    /**
     * {@snippet lang = c:
     * DWORD GetWindowThreadProcessId(HWND hWnd, LPDWORD lpdwProcessId)
     *}
     */
    public static int GetWindowThreadProcessId(MemorySegment hWnd, MemorySegment lpdwProcessId) {
        var mh$ = GetWindowThreadProcessId.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetWindowThreadProcessId", hWnd, lpdwProcessId);
            }
            return (int) mh$.invokeExact(hWnd, lpdwProcessId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}

